// Code generated by mockery v2.33.0. DO NOT EDIT.

package relationship

import (
	context "context"

	model "github.com/hxcuber/friends-management/api/internal/controller/model"
	mock "github.com/stretchr/testify/mock"
)

// MockRepository is an autogenerated mock type for the Repository type
type MockRepository struct {
	mock.Mock
}

// CreateRelationship provides a mock function with given fields: ctx, rela
func (_m *MockRepository) CreateRelationship(ctx context.Context, rela model.Relationship) error {
	ret := _m.Called(ctx, rela)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Relationship) error); ok {
		r0 = rf(ctx, rela)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRelationship provides a mock function with given fields: ctx, rela
func (_m *MockRepository) DeleteRelationship(ctx context.Context, rela model.Relationship) error {
	ret := _m.Called(ctx, rela)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Relationship) error); ok {
		r0 = rf(ctx, rela)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindRelationship provides a mock function with given fields: ctx, receiver, sender
func (_m *MockRepository) FindRelationship(ctx context.Context, receiver model.User, sender model.User) (*model.Relationship, error) {
	ret := _m.Called(ctx, receiver, sender)

	var r0 *model.Relationship
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User, model.User) (*model.Relationship, error)); ok {
		return rf(ctx, receiver, sender)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.User, model.User) *model.Relationship); ok {
		r0 = rf(ctx, receiver, sender)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Relationship)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.User, model.User) error); ok {
		r1 = rf(ctx, receiver, sender)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFriends provides a mock function with given fields: ctx, user
func (_m *MockRepository) GetFriends(ctx context.Context, user model.User) (model.Users, error) {
	ret := _m.Called(ctx, user)

	var r0 model.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User) (model.Users, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.User) model.Users); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReceiversFromEmails provides a mock function with given fields: ctx, sender, emails
func (_m *MockRepository) GetReceiversFromEmails(ctx context.Context, sender model.User, emails []string) (model.Users, error) {
	ret := _m.Called(ctx, sender, emails)

	var r0 model.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User, []string) (model.Users, error)); ok {
		return rf(ctx, sender, emails)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.User, []string) model.Users); ok {
		r0 = rf(ctx, sender, emails)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.User, []string) error); ok {
		r1 = rf(ctx, sender, emails)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSubscribers provides a mock function with given fields: ctx, sender
func (_m *MockRepository) GetSubscribers(ctx context.Context, sender model.User) (model.Users, error) {
	ret := _m.Called(ctx, sender)

	var r0 model.Users
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User) (model.Users, error)); ok {
		return rf(ctx, sender)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.User) model.Users); ok {
		r0 = rf(ctx, sender)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(model.Users)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.User) error); ok {
		r1 = rf(ctx, sender)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateRelationship provides a mock function with given fields: ctx, rela
func (_m *MockRepository) UpdateRelationship(ctx context.Context, rela model.Relationship) error {
	ret := _m.Called(ctx, rela)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Relationship) error); ok {
		r0 = rf(ctx, rela)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockRepository creates a new instance of MockRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockRepository {
	mock := &MockRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
